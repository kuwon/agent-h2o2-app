"""create kis_pension_knowledge_openai

Revision ID: a27dcda756c4
Revises: create_kis_pension_knowledge_openai
Create Date: 2025-09-05 21:10:21.364333

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'a27dcda756c4'
down_revision = 'a5ae02a7033b'
branch_labels = None
depends_on = None

def upgrade():
    # 0) 필수: schema/extension 확보
    op.execute('CREATE SCHEMA IF NOT EXISTS "ai";')
    op.execute('CREATE EXTENSION IF NOT EXISTS "vector";')  # pgvector

    # 1) 테이블이 없으면 생성 (DDL은 raw SQL로 IF NOT EXISTS 처리)
    op.execute("""
    CREATE TABLE IF NOT EXISTS ai.kis_pension_knowledge_openai (
        id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        name TEXT,
        meta_data JSONB DEFAULT '{}'::jsonb,
        filters  JSONB DEFAULT '{}'::jsonb,
        content  TEXT,
        embedding VECTOR(1536),
        usage    JSONB,
        content_hash TEXT,
        created_at TIMESTAMPTZ DEFAULT now(),
        updated_at TIMESTAMPTZ
    );
    """)

    # 2) 존재하는 테이블의 id가 identity/auto 증가가 아닐 수 있으므로 보정
    #    - identity가 아니면 시퀀스를 붙여 기본값(nextval) 설정
    op.execute("""
    DO $$
    BEGIN
      IF EXISTS (
        SELECT 1
        FROM information_schema.columns
        WHERE table_schema='ai' AND table_name='kis_pension_knowledge_openai' AND column_name='id'
      ) THEN
        -- id 컬럼이 identity가 아닌 경우에만 처리
        IF NOT EXISTS (
          SELECT 1
          FROM information_schema.columns
          WHERE table_schema='ai'
            AND table_name='kis_pension_knowledge_openai'
            AND column_name='id'
            AND is_identity='YES'
        ) THEN
          -- 시퀀스 없으면 생성
          IF NOT EXISTS (
            SELECT 1 FROM pg_class c
            JOIN pg_namespace n ON n.oid = c.relnamespace
            WHERE c.relkind = 'S'
              AND n.nspname = 'ai'
              AND c.relname = 'kis_pension_knowledge_openai_id_seq'
          ) THEN
            CREATE SEQUENCE ai.kis_pension_knowledge_openai_id_seq;
          END IF;

          -- 기본값으로 시퀀스 부착
          ALTER TABLE ai.kis_pension_knowledge_openai
            ALTER COLUMN id SET DEFAULT nextval('ai.kis_pension_knowledge_openai_id_seq');

          -- PK/NOT NULL 보장
          ALTER TABLE ai.kis_pension_knowledge_openai
            ALTER COLUMN id SET NOT NULL;

          -- PK 없으면 생성(보통 존재함)
          -- DO 블록에서는 조건부 PK 생성이 번거로워 생략. 필요 시 외부에서 점검/추가.
        END IF;
      END IF;
    END $$;
    """)

    # 3) 컬럼 기본값/타입 보정 (존재 시에만 업데이트)
    #    meta_data/filters가 NULL이면 {}로 채우는 one-shot 데이터 정리(선택)
    op.execute("""
    UPDATE ai.kis_pension_knowledge_openai
       SET meta_data = '{}'::jsonb
     WHERE meta_data IS NULL;
    UPDATE ai.kis_pension_knowledge_openai
       SET filters = '{}'::jsonb
     WHERE filters IS NULL;
    """)

    # 4) 인덱스들 생성 (없을 때만)
    #    - content_hash 유니크 (중복 문서 방지 용도)
    op.execute("""
    DO $$
    BEGIN
      IF NOT EXISTS (
        SELECT 1 FROM pg_class c
        JOIN pg_namespace n ON n.oid=c.relnamespace
        WHERE c.relkind='i' AND c.relname='idx_kpk_content_hash' AND n.nspname='ai'
      ) THEN
        CREATE UNIQUE INDEX idx_kpk_content_hash
          ON ai.kis_pension_knowledge_openai (content_hash);
      END IF;
    END $$;
    """)

    #    - JSONB GIN 인덱스 (검색/필터 효율)
    op.execute("""
    DO $$
    BEGIN
      IF NOT EXISTS (
        SELECT 1 FROM pg_class c
        JOIN pg_namespace n ON n.oid=c.relnamespace
        WHERE c.relkind='i' AND c.relname='idx_kpk_meta_data_gin' AND n.nspname='ai'
      ) THEN
        CREATE INDEX idx_kpk_meta_data_gin
          ON ai.kis_pension_knowledge_openai
          USING GIN (meta_data);
      END IF;

      IF NOT EXISTS (
        SELECT 1 FROM pg_class c
        JOIN pg_namespace n ON n.oid=c.relnamespace
        WHERE c.relkind='i' AND c.relname='idx_kpk_filters_gin' AND n.nspname='ai'
      ) THEN
        CREATE INDEX idx_kpk_filters_gin
          ON ai.kis_pension_knowledge_openai
          USING GIN (filters);
      END IF;
    END $$;
    """)

    #    - 벡터 인덱스(IVFFLAT). pgvector 0.5+ 필요. 빈 테이블에서 만드는 게 일반적.
    #      (리스트 파라미터는 데이터량에 맞춰 조정)
    op.execute("""
    DO $$
    BEGIN
      IF NOT EXISTS (
        SELECT 1 FROM pg_class c
        JOIN pg_namespace n ON n.oid=c.relnamespace
        WHERE c.relkind='i' AND c.relname='idx_kpk_embedding_ivfflat' AND n.nspname='ai'
      ) THEN
        CREATE INDEX idx_kpk_embedding_ivfflat
          ON ai.kis_pension_knowledge_openai
          USING ivfflat (embedding vector_l2_ops)
          WITH (lists = 100);
      END IF;
    END $$;
    """)

    #    - 시간 정렬 보조 인덱스(선택)
    op.execute("""
    DO $$
    BEGIN
      IF NOT EXISTS (
        SELECT 1 FROM pg_class c
        JOIN pg_namespace n ON n.oid=c.relnamespace
        WHERE c.relkind='i' AND c.relname='idx_kpk_created_at' AND n.nspname='ai'
      ) THEN
        CREATE INDEX idx_kpk_created_at
          ON ai.kis_pension_knowledge_openai (created_at);
      END IF;
    END $$;
    """)


def downgrade():
    # 보수적: 인덱스만 삭제하고 테이블은 유지 (운영데이터 보존 관점)
    op.execute("""
    DROP INDEX IF EXISTS ai.idx_kpk_created_at;
    DROP INDEX IF EXISTS ai.idx_kpk_embedding_ivfflat;
    DROP INDEX IF EXISTS ai.idx_kpk_filters_gin;
    DROP INDEX IF EXISTS ai.idx_kpk_meta_data_gin;
    DROP INDEX IF EXISTS ai.idx_kpk_content_hash;
    """)
    # 테이블 자체를 제거하려면 아래 주석 해제
    # op.execute('DROP TABLE IF EXISTS ai.kis_pension_knowledge_openai;')
