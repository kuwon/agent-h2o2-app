# pnsn_sim.py
import math
import calendar
from typing import Optional, Union, Tuple, Dict
from datetime import datetime, date
import pandas as pd


# ─────────────────────────────────────────────────────────────────────────────
# 유틸
# ─────────────────────────────────────────────────────────────────────────────
def _to_date(d: Union[str, date, None]) -> Optional[date]:
    if d is None:
        return None
    if isinstance(d, date):
        return d
    return datetime.strptime(d, "%Y-%m-%d").date()


def 절사10원(x: float | int) -> int:
    return int(math.floor(float(x) / 10.0) * 10)


def add_year_safe(d: date) -> date:
    return d.replace(year=d.year + 1)


# ─────────────────────────────────────────────────────────────────────────────
# 퇴직소득세 계산 모듈 (질문 코드 그대로 반영)
# ─────────────────────────────────────────────────────────────────────────────
def calc_근속년수공제(근속년수: int, 이연퇴직소득: int) -> int:
    if 근속년수 <= 0:
        return 0
    if 근속년수 <= 5:
        공제 = 근속년수 * 1_000_000
    elif 근속년수 <= 10:
        공제 = (근속년수 - 5) * 2_000_000 + 5_000_000
    elif 근속년수 <= 20:
        공제 = (근속년수 - 10) * 2_500_000 + 15_000_000
    else:
        공제 = (근속년수 - 20) * 3_000_000 + 40_000_000
    return min(이연퇴직소득, 공제)


def calc_환산급여(근속년수: int, 이연퇴직소득: int, 근속년수공제: int) -> int:
    if 근속년수 <= 0:
        return 0
    return math.floor(((이연퇴직소득 - 근속년수공제) * 12) / 근속년수)


def calc_환산급여별공제(환산급여: int) -> int:
    s = 환산급여
    if s <= 8_000_000:
        공제 = s
    elif s <= 70_000_000:
        공제 = (s - 8_000_000) * 0.6 + 8_000_000
    elif s <= 100_000_000:
        공제 = (s - 70_000_000) * 0.55 + 45_200_000
    elif s <= 300_000_000:
        공제 = (s - 100_000_000) * 0.45 + 61_700_000
    else:
        공제 = (s - 300_000_000) * 0.35 + 151_700_000
    return math.floor(공제)


def calc_환산산출세액(과세표준: int) -> int:
    s = max(0, 과세표준)
    if s <= 14_000_000:
        tax = s * 0.06
    elif s <= 50_000_000:
        tax = s * 0.15 - 1_260_000
    elif s <= 88_000_000:
        tax = s * 0.24 - 5_760_000
    elif s <= 150_000_000:
        tax = s * 0.35 - 15_440_000
    elif s <= 300_000_000:
        tax = s * 0.38 - 19_940_000
    elif s <= 500_000_000:
        tax = s * 0.40 - 25_940_000
    elif s <= 1_000_000_000:
        tax = s * 0.42 - 35_940_000
    else:
        tax = s * 0.45 - 65_940_000
    return math.floor(tax)


def calc_퇴직소득세(근속년수: int, 이연퇴직소득: int) -> Dict[str, float]:
    근속년수공제 = calc_근속년수공제(근속년수, 이연퇴직소득)
    환산급여 = calc_환산급여(근속년수, 이연퇴직소득, 근속년수공제)
    환산급여별공제 = calc_환산급여별공제(환산급여)
    퇴직소득_과세표준 = max(0, 환산급여 - 환산급여별공제)
    환산산출세액 = calc_환산산출세액(퇴직소득_과세표준)

    # 엑셀 규칙: ROUNDDOWN(근속년수/12, 0)
    퇴직소득산출세액 = (환산산출세액 * 근속년수 / 12) // 10 * 10
    퇴직소득세율 = (
        float(퇴직소득산출세액) / float(이연퇴직소득) if 이연퇴직소득 > 0 else 0.0
    )
    지방소득세율 = 0.10
    지방소득세액 = (퇴직소득산출세액 * 지방소득세율) // 10 * 10

    return {
        "근속년수": 근속년수,
        "이연퇴직소득": 이연퇴직소득,
        "근속년수공제": int(근속년수공제),
        "환산급여": int(환산급여),
        "환산급여별공제": int(환산급여별공제),
        "퇴직소득_과세표준": int(퇴직소득_과세표준),
        "환산산출세액": int(환산산출세액),
        "퇴직소득산출세액": int(퇴직소득산출세액),
        "지방소득세액": int(지방소득세액),
        "퇴직소득세율": float(퇴직소득세율),
        "지방소득세율": float(지방소득세율),
        "기타소득세율": 0.15,
    }


def calc_연금수령가능일(
    생년월일: Union[str, date],
    제도가입일: Union[str, date],
    퇴직일자: Optional[Union[str, date]] = None,
) -> date:
    생년월일_dt = _to_date(생년월일)
    제도가입일_dt = _to_date(제도가입일)
    퇴직일자_dt = _to_date(퇴직일자)

    # 55세 되는 날(윤년 보정)
    try:
        생55세 = 생년월일_dt.replace(year=생년월일_dt.year + 55)
    except ValueError:
        생55세 = 생년월일_dt.replace(year=생년월일_dt.year + 55, month=2, day=28)

    try:
        제도가입일_5년후 = 제도가입일_dt.replace(year=제도가입일_dt.year + 5)
    except ValueError:
        제도가입일_5년후 = 제도가입일_dt.replace(
            year=제도가입일_dt.year + 5, month=2, day=28
        )

    # 최종
    return (
        max(생55세, 제도가입일_5년후)
        if 퇴직일자_dt is None
        else max(생55세, 퇴직일자_dt)
    )


# ─────────────────────────────────────────────────────────────────────────────
# 시뮬레이터 본체
# ─────────────────────────────────────────────────────────────────────────────
def simulate_pension(
    # 날짜: str("YYYY-MM-DD") 또는 date 허용
    평가기준일: Union[str, date],
    생년월일: Union[str, date],
    입사일자: Optional[Union[str, date]],
    퇴직일자: Optional[Union[str, date]],
    퇴직연금제도가입일: Union[str, date],
    # IRP가입일: Optional[Union[str, date]],
    연금개시일: Union[str, date],
    # 금액/율
    과세제외_자기부담금: int,
    이연퇴직소득: Optional[int],
    그외: int,  # (세액공제자기부담금 + 운용손익)
    운용수익률: float,
    # 지급 옵션
    지급옵션: str,  # "기간확정형" | "금액확정형" | "한도수령" | "최소수령"
    지급기간_년: Optional[int] = None,  # 기간확정형 필수
    수령금액_년: Optional[int] = None,  # 금액확정형 필수
    최대행수: int = 40,  # 무한루프 가드(금액확정형)
    # 🔸 추가: 퇴직세 override
    퇴직소득산출세액: Optional[int] = None,
) -> pd.DataFrame:
    """
    Streamlit 등에서 호출하는 단일 진입점. rows → DataFrame을 반환.
    """

    # ── 입력 파싱 ──
    평가기준일_dt = _to_date(평가기준일)
    생년월일_dt = _to_date(생년월일)
    입사일자_dt = _to_date(입사일자) if 입사일자 is not None else None
    퇴직일자_dt = _to_date(퇴직일자) if 퇴직일자 is not None else None
    제도가입일_dt = _to_date(퇴직연금제도가입일)
    # IRP가입일_dt_raw = _to_date(IRP가입일) if IRP가입일 is not None else None

    # (1) IRP가입일이 없으면 평가기준일로 대체
    # IRP가입일_dt = IRP가입일_dt_raw if IRP가입일_dt_raw is not None else 평가기준일_dt

    연금개시일_dt = _to_date(연금개시일) if 연금개시일 is not None else None
    연금수령가능일 = calc_연금수령가능일(생년월일_dt, 제도가입일_dt, 퇴직일자_dt)

    if 평가기준일_dt is None or 생년월일_dt is None or 제도가입일_dt is None:
        raise ValueError("날짜 입력이 유효하지 않습니다.")

    # ── 기본 파생값 ──
    # (2) 이연퇴직소득이 없으면 세금·근속 계산 스킵
    이연퇴직소득 = (
        0 if (이연퇴직소득 is None or 이연퇴직소득 <= 0) else int(이연퇴직소득)
    )

    # if 이연퇴직소득 > 0:
    #     # 근속년수(올림) 계산: 입사일자/퇴직일자 모두 있어야 함
    #     if 입사일자_dt is None or 퇴직일자_dt is None:
    #         raise ValueError("이연퇴직소득이 있는 경우 입사일자/퇴직일자이 필요합니다.")
    #     근속월수 = (퇴직일자_dt.year - 입사일자_dt.year) * 12 + (
    #         퇴직일자_dt.month - 입사일자_dt.month
    #     )
    #     if 퇴직일자_dt.day < 입사일자_dt.day:
    #         근속월수 -= 1
    #     근속년수 = math.ceil((근속월수 + 1) / 12)
    # else:
    #     # 이연퇴직소득이 없으면 근속 계산도 생략
    #     근속년수 = 0
    #     퇴직일자_dt = 퇴직일자_dt  # 그대로 두되, 이후 로직에서 사용하지 않음

    # 연금수령연차(제도가입일 기준): 2013-01-01 이전 가입이면 6, 아니면 1
    연금수령연차 = (
        max(0, 평가기준일_dt.year - 연금수령가능일.year) + 6
        if 제도가입일_dt < date(2013, 1, 1)
        else 1
    )

    # 개시 나이
    수령나이 = 연금개시일_dt.year - 생년월일_dt.year
    if (연금개시일_dt.month, 연금개시일_dt.day) < (생년월일_dt.month, 생년월일_dt.day):
        수령나이 -= 1

    나이 = 평가기준일_dt.year - 생년월일_dt.year
    if (평가기준일_dt.month, 평가기준일_dt.day) < (생년월일_dt.month, 생년월일_dt.day):
        수령나이 -= 1

    # ── 루프 준비 ──
    rows = []
    cum_paid_taxfree = 0
    cum_paid_deferred = 0
    cap_null_mode = False

    U = 연금수령연차
    과세기간개시일 = 연금개시일_dt  # 첫 연금수령일에는 과세기간개시일 = 연금개시일
    적립금 = float(과세제외_자기부담금 + 이연퇴직소득 + 그외)

    # (3) 퇴직세율: 이연퇴직소득이 없으면 0
    # 🔸 퇴직세율 결정 로직 (우선순위: 직접입력 세율 > 직접입력 세액 > 계산기)
    if 이연퇴직소득 <= 0:
        퇴직세율 = 0.0
    else:
        if (퇴직소득산출세액 is not None) and (퇴직소득산출세액 >= 0):
            퇴직세율 = float(퇴직소득산출세액) / float(이연퇴직소득)
        # else:
        #     퇴직세율 = calc_퇴직소득세(근속년수, 이연퇴직소득)["퇴직소득세율"]

    연금지급일 = 평가기준일_dt
    차년도지급일 = add_year_safe(평가기준일_dt)

    while 연금지급일 <= 연금개시일_dt:

        if 연금지급일.year == 연금개시일_dt.year:
            차년도지급일 = 연금개시일_dt
        else:
            차년도지급일 = add_year_safe(연금지급일)

        year_days = 366 if calendar.isleap(연금지급일.year) else 365
        year_frac = (차년도지급일 - 연금지급일).days / year_days
        운용수익 = 적립금 * ((1 + 운용수익률) ** year_frac - 1)
        next_적립금 = 적립금 + 운용수익

        # 개시일 '전'에 찍을 첫 행만 필요하다면 조건을 더 좁혀도 됩니다.
        rows.append(
            {
                "지급회차": 0,
                "연금수령연차": U,
                "나이": 나이,
                "연금지급일": 연금지급일.strftime("%Y-%m-%d"),
                "지급전잔액": 적립금,
                "실제지급액": 0,
                "지급후적립금": 적립금,
                "운용수익": 운용수익,
                "차년도적립금": next_적립금,
                "과세기간개시일": "",
                "한도기준잔액(1/1)": 0,
                "한도": None,
                "한도초과분": 0,
                "초과_과세제외": 0,
                "초과_이연퇴직": 0,
                "초과_그외": 0,
                "이내_과세제외": 0,
                "이내_이연퇴직": 0,
                "이내_그외": 0,
                "초과_과세제외_소득세": 0,
                "초과_이연퇴직_소득세": 0,
                "초과_그외_소득세": 0,
                "이내_과세제외_소득세": 0,
                "이내_이연퇴직_소득세": 0,
                "이내_그외_소득세": 0,
                "소득세_합계": 0,
                "초과_과세제외_지방세": 0,
                "초과_이연퇴직_지방세": 0,
                "초과_그외_지방세": 0,
                "이내_과세제외_지방세": 0,
                "이내_이연퇴직_지방세": 0,
                "이내_그외_지방세": 0,
                "지방세_합계": 0,
                "총세액": 0,
                "실수령액": 0,
                "세율": 0,
                "지급옵션": "개시전",
            }
        )

        # 다음 해로 굴리기
        나이 += 1
        if 연금지급일 >= 연금수령가능일:
            U += 1
        연금지급일 = add_year_safe(연금지급일)
        적립금 = next_적립금

    # 🔹 개시일 도달 시점: 지급일을 개시일로 강제 세팅
    if 연금지급일 >= 연금개시일_dt:
        연금지급일 = 연금개시일_dt  # 🔧 개시년도는 개시일 당일로
        # 검증용(결과 미사용)
        U = 연금수령연차 + max(
            0, 연금개시일_dt.year - 연금수령가능일.year
        )  # 연차 1로 시작
        지급회차 = 1
        # 이후 while True 루프에서 실제 지급 처리
    else:
        U = 0

    while True:
        if 적립금 <= 0:
            break

        # ② 회차 계산(표시/세율용)
        # 1,2,...

        # ③ 옵션별 "잔여횟수" 계산
        if 지급옵션 == "기간확정형":
            총지급년수 = int(지급기간_년)
            잔여횟수 = max(총지급년수 - 지급회차 + 1, 0)
            if 잔여횟수 == 0:
                break

        else:
            잔여횟수 = None
            if 지급옵션 == "금액확정형":
                if 지급회차 > 최대행수:
                    break  # 가드

        # [1] 한도 계산용 1/1 잔액(ACT/ACT)
        if U == 연금수령연차:
            한도기준잔액 = 적립금
        else:
            delta_days = (연금지급일 - 과세기간개시일).days  # 그 해 1/1 → 지급일까지
            year_base = (
                과세기간개시일.year
                if 연금지급일.year == 과세기간개시일.year
                else 연금지급일.year
            )
            year_days = 366 if calendar.isleap(year_base) else 365
            할인계수 = (1 + 운용수익률) ** (delta_days / year_days)
            한도기준잔액 = 적립금 / 할인계수

        # [2] 연금수령한도 (11-U<=0부터 None 고정)
        if (11 - U) <= 0 or cap_null_mode:
            한도 = None
            cap_null_mode = True
        else:
            한도 = (한도기준잔액 / (11 - U)) * 1.2

        # [3] 실제 지급액(지급옵션)
        if 지급옵션 == "기간확정형":
            pay = 적립금 / 잔여횟수

        elif 지급옵션 == "금액확정형":
            target = 수령금액_년
            pay = target if 적립금 > target else 적립금

        elif 지급옵션 == "한도수령":
            if 한도 is None:
                pay = 적립금
            else:
                pay = min(한도, 적립금)

        elif 지급옵션 == "최소수령":
            if 지급회차 >= 11:
                pay = 적립금
            else:
                pay = min(10_000, 적립금)
        elif 지급옵션 == "일시금":
            pay = 적립금
        else:
            raise ValueError("지원하지 않는 지급옵션입니다.")

        pay = max(0, min(pay, 적립금))
        if pay == 0:
            break

        # [4] 한도 초과/이내 분리
        if 한도 is None:
            초과금액 = 0
            이내금액 = pay
        else:
            초과금액 = max(0, pay - 한도)
            이내금액 = pay - 초과금액

        # [5] 배정: 이내(과세제외→이연퇴직→그외) → 초과(이연퇴직→그외)
        # (a) 이내
        남은_과세제외 = max(0, 과세제외_자기부담금 - cum_paid_taxfree)
        이내_과세제외 = min(이내금액, 남은_과세제외)
        남음 = 이내금액 - 이내_과세제외

        남은_이연퇴직 = max(0, 이연퇴직소득 - cum_paid_deferred)
        이내_이연퇴직 = min(남음, 남은_이연퇴직)
        이내_그외 = max(0, 남음 - 이내_이연퇴직)

        cum_paid_taxfree += 이내_과세제외
        cum_paid_deferred += 이내_이연퇴직

        # (b) 초과 (과세제외 배정 금지)
        남은_이연퇴직 = max(0, 이연퇴직소득 - cum_paid_deferred)
        초과_이연퇴직 = min(초과금액, 남은_이연퇴직)
        초과_그외 = max(0, 초과금액 - 초과_이연퇴직)
        초과_과세제외 = 0
        cum_paid_deferred += 초과_이연퇴직

        # 총 지급/잔액
        실제지급액 = (
            이내_과세제외
            + 이내_이연퇴직
            + 이내_그외
            + 초과_과세제외
            + 초과_이연퇴직
            + 초과_그외
        )
        지급후적립금 = 적립금 - 실제지급액
        운용수익 = 지급후적립금 * 운용수익률
        next_적립금 = 지급후적립금 + 운용수익

        # [6] 세액(10원 절사)
        # 이연퇴직: 초과 100%, 이내 70%(~10회), 60%(11회~)
        이내_이연퇴직_계수 = 0.60 if 지급회차 >= 11 else 0.70

        초과_이연퇴직_소득세 = 절사10원(초과_이연퇴직 * 퇴직세율)
        초과_이연퇴직_지방세 = 절사10원(초과_이연퇴직_소득세 * 0.10)

        이내_이연퇴직_소득세 = 절사10원(이내_이연퇴직 * 퇴직세율 * 이내_이연퇴직_계수)
        이내_이연퇴직_지방세 = 절사10원(이내_이연퇴직_소득세 * 0.10)

        # 과세제외: 0
        초과_과세제외_소득세 = 0
        초과_과세제외_지방세 = 0
        이내_과세제외_소득세 = 0
        이내_과세제외_지방세 = 0

        # 그외: 이내 구간은 1,500만원 초과시 15%, 아니면 나이별 3/4/5%
        if 이내_그외 > 15_000_000:
            이내_그외_세율 = 0.15
        else:
            if 수령나이 >= 80:
                이내_그외_세율 = 0.03
            elif 수령나이 >= 70:
                이내_그외_세율 = 0.04
            else:
                이내_그외_세율 = 0.05
        이내_그외_소득세 = 절사10원(이내_그외 * 이내_그외_세율)
        이내_그외_지방세 = 절사10원(이내_그외_소득세 * 0.10)

        # 그외 초과: 기타소득세 15%
        초과_그외_소득세 = 절사10원(초과_그외 * 0.15)
        초과_그외_지방세 = 절사10원(초과_그외_소득세 * 0.10)

        소득세_합계 = (
            초과_과세제외_소득세
            + 초과_이연퇴직_소득세
            + 초과_그외_소득세
            + 이내_과세제외_소득세
            + 이내_이연퇴직_소득세
            + 이내_그외_소득세
        )
        지방세_합계 = (
            초과_과세제외_지방세
            + 초과_이연퇴직_지방세
            + 초과_그외_지방세
            + 이내_과세제외_지방세
            + 이내_이연퇴직_지방세
            + 이내_그외_지방세
        )
        총세액 = 소득세_합계 + 지방세_합계

        # rows 추가(날짜는 문자열)
        rows.append(
            {
                "지급회차": 지급회차,
                "연금수령연차": U,
                "나이": 수령나이,
                "연금지급일": 연금지급일.strftime("%Y-%m-%d"),
                "지급전잔액": 적립금,
                "실제지급액": 실제지급액,
                "지급후적립금": 지급후적립금,
                "운용수익": 운용수익,
                "차년도적립금": next_적립금,
                "과세기간개시일": 과세기간개시일.strftime("%Y-%m-%d"),
                "한도기준잔액(1/1)": 한도기준잔액,
                "한도": 한도,
                "한도초과분": 초과금액,
                "초과_과세제외": 초과_과세제외,  # 0
                "초과_이연퇴직": 초과_이연퇴직,
                "초과_그외": 초과_그외,
                "이내_과세제외": 이내_과세제외,
                "이내_이연퇴직": 이내_이연퇴직,
                "이내_그외": 이내_그외,
                "초과_과세제외_소득세": 초과_과세제외_소득세,
                "초과_이연퇴직_소득세": 초과_이연퇴직_소득세,
                "초과_그외_소득세": 초과_그외_소득세,
                "이내_과세제외_소득세": 이내_과세제외_소득세,
                "이내_이연퇴직_소득세": 이내_이연퇴직_소득세,
                "이내_그외_소득세": 이내_그외_소득세,
                "소득세_합계": 소득세_합계,
                "초과_과세제외_지방세": 초과_과세제외_지방세,
                "초과_이연퇴직_지방세": 초과_이연퇴직_지방세,
                "초과_그외_지방세": 초과_그외_지방세,
                "이내_과세제외_지방세": 이내_과세제외_지방세,
                "이내_이연퇴직_지방세": 이내_이연퇴직_지방세,
                "이내_그외_지방세": 이내_그외_지방세,
                "지방세_합계": 지방세_합계,
                "총세액": 총세액,
                "실수령액": 실제지급액 - 총세액,
                "세율": (총세액 / 실제지급액) if 실제지급액 > 0 else 0,
                "지급옵션": 지급옵션,
            }
        )

        # 인자 업데이트
        적립금 = next_적립금
        연금지급일 = add_year_safe(연금지급일)
        U += 1
        수령나이 += 1
        지급회차 += 1  # ✅ 지급이 실제로 한 번 이루어졌으니 회차 +1
        과세기간개시일 = date(과세기간개시일.year + 1, 1, 1)
        # 금액확정형 가드
        if 지급옵션 == "금액확정형" and 지급회차 >= 최대행수:
            break

    df_capped = pd.DataFrame(rows)
    df_capped["연금지급일"] = pd.to_datetime(df_capped["연금지급일"], errors="coerce")
    df_capped["과세기간개시일"] = pd.to_datetime(
        df_capped["과세기간개시일"], errors="coerce"
    )
    df_capped["지급옵션"] = df_capped["지급옵션"].astype("string")

    return df_capped


# ── 단독 실행 테스트(선택) ───────────────────────────────────────────────
if __name__ == "__main__":
    # 질문에서 주신 예시값으로 간단 실행
    df = simulate_pension(
        평가기준일="2025-09-01",
        생년월일="1968-02-15",
        입사일자="2009-10-01",
        퇴직일자="2025-09-01",
        퇴직연금제도가입일="2012-01-01",
        # IRP가입일="2014-05-01",
        연금개시일="2027-12-31",
        과세제외_자기부담금=30_000_000,
        이연퇴직소득=500_000_000,
        그외=150_000_000 + 20_000_000,
        운용수익률=0.03,
        지급옵션="기간확정형",
        지급기간_년=5,
        # 지급옵션="금액확정형", 수령금액_년=12_000_000,
    )
    print(df)